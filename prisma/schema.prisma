generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model api_key {
  id           Int       @id @default(autoincrement())
  owner_id     Int?
  key          String    @db.Char(64)
  created_date DateTime  @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  user         user?     @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model claim {
  id           Int          @id @default(autoincrement())
  owner_id     Int
  group_id     Int?
  evidence_id  Int
  claim        String       @db.VarChar(1000)
  label_tag   Int
  created_date DateTime?    @default(dbgenerated("CURRENT_DATE")) @db.Date
  evidence     evidence?    @relation(fields: [evidence_id], references: [id], onUpdate: NoAction)
  claim_group  claim_group? @relation(fields: [group_id], references: [id], onUpdate: NoAction)
  user         user?        @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
  feedback     feedback[]
}

model claim_group {
  id            Int       @id @default(autoincrement())
  owner_id      Int
  name          String    @db.VarChar(100)
  created_date  DateTime  @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  modified_date DateTime? @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  claim         claim[]
  user          user?     @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
}

model evidence {
  id                Int                @id @default(autoincrement())
  owner_id          Int?
  category_id       Int?
  evidence          String             @db.VarChar(1000)
  url               String?            @db.VarChar(200)
  created_date      DateTime           @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  claim             claim[]
  evidence_category evidence_category? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  user              user?              @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
}

model evidence_category {
  id       Int        @id @default(autoincrement())
  name     String?    @db.VarChar(100)
  evidence evidence[]
}

model feedback {
  id             Int             @id @default(autoincrement())
  claim_id       Int
  topic_id       Int
  content        String          @db.VarChar(1000)
  created_date   DateTime        @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  claim          claim           @relation(fields: [claim_id], references: [id], onUpdate: NoAction)
  feedback_topic feedback_topic  @relation(fields: [topic_id], references: [id], onUpdate: NoAction)
}

model feedback_topic {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(100)
  feedback feedback[]
}

model post {
  id           Int       @id @default(autoincrement())
  owner_id     Int
  topic_id     Int
  content      String    @db.VarChar(1000)
  created_date DateTime? @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  user         user?     @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
  topic        post_topic?    @relation(fields: [topic_id], references: [id], onUpdate: NoAction)
}

model supervise {
  supervisor_id                      Int
  supervised_id                      Int
  created_date                       DateTime  @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  user_supervise_supervised_idTouser user      @relation("supervise_supervised_idTouser", fields: [supervised_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_supervise_supervisor_idTouser user      @relation("supervise_supervisor_idTouser", fields: [supervisor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([supervisor_id, supervised_id])
}

model post_topic {
  id    Int     @id @default(autoincrement())
  topic String? @db.VarChar(100)
  post  post[]
}

model user {
  id                                      Int           @id @default(autoincrement())
  name                                    String        @db.VarChar(100)
  birthdate                               DateTime?     @db.Date
  phone                                   String?       @db.Char(10)
  email                                   String        @db.VarChar(100)
  username                                String        @db.VarChar(100)
  password                                String        @db.Char(64)
  role_id                                 Int
  created_date                            DateTime?     @default(dbgenerated("CURRENT_DATE")) @db.Date
  role                                    role?         @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  api_key                                 api_key[]
  claim                                   claim[]
  claim_group                             claim_group[]
  evidence                                evidence[]
  post                                    post[]
  supervise_supervise_supervised_idTouser supervise[]   @relation("supervise_supervised_idTouser")
  supervise_supervise_supervisor_idTouser supervise[]   @relation("supervise_supervisor_idTouser")
}

model role {
  id   Int    @id @unique
  name String @db.VarChar(50) @unique
  user user[]
}