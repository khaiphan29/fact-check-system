generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model evidence {
  id                Int                @id @default(autoincrement())
  category_id       Int?
  claim_id          Int                @unique
  provider_id       Int
  content           String             @db.VarChar(3000)
  url               String             @db.VarChar(500)
  created_date      DateTime           @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  evidence_category evidence_category? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  claim             claim              @relation(fields: [claim_id], references: [id])
  source            evidence_source    @relation(fields: [provider_id], references: [id])
}

model evidence_category {
  id       Int        @id @default(autoincrement())
  name     String?    @db.VarChar(100)
  evidence evidence[]
}

model evidence_source {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  scraping_url     String             @db.VarChar(1000)
  created_date     DateTime           @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  evidence         evidence[]
  scraping_history scraping_history[]
}

model scraping_history {
  id           Int             @id @default(autoincrement())
  source_id    Int
  url          String
  status       Boolean
  created_date DateTime        @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  source       evidence_source @relation(fields: [source_id], references: [id], onUpdate: NoAction)
}

model claim {
  id           Int          @id @default(autoincrement())
  owner_id     Int
  group_id     Int
  claim        String       @db.VarChar(1000)
  label_tag    Int
  created_date DateTime     @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  claim_group  claim_group? @relation(fields: [group_id], references: [id], onUpdate: NoAction)
  user         user         @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
  evidence     evidence?
  feedback     feedback[]
}

model claim_group {
  id            Int      @id @default(autoincrement())
  owner_id      Int      @default(0)
  name          String   @db.VarChar(100)
  created_date  DateTime @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  modified_date DateTime @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  claim         claim[]
  user          user     @relation(fields: [owner_id], references: [id], onUpdate: NoAction, onDelete: SetDefault)
}

model feedback {
  id                  Int             @id @default(autoincrement())
  claim_id            Int
  topic_id            Int?
  isNegative          Boolean         @default(false)
  isIncorrectRating   Boolean         @default(false)
  isIncorrectEvidence Boolean         @default(false)
  content             String          @db.VarChar(2000)
  created_date        DateTime        @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
  claim               claim           @relation(fields: [claim_id], references: [id], onUpdate: NoAction)
  feedback_topic      feedback_topic? @relation(fields: [topic_id], references: [id], onUpdate: NoAction)
}

model feedback_topic {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(100)
  feedback feedback[]
}

model user {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(100)
  birthdate    DateTime?     @db.Date
  phone        String?       @db.Char(10)
  email        String        @unique @db.VarChar(100)
  username     String        @unique @db.VarChar(100)
  password     String        @db.Char(64)
  role_id      Int
  created_date DateTime?     @default(dbgenerated("CURRENT_DATE")) @db.Date
  role         role?         @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  claim        claim[]
  claim_group  claim_group[]
}

model role {
  id   Int    @id @unique
  name String @unique @db.VarChar(50)
  user user[]
}
